<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaClasses</name>
    </assembly>
    <members>
        <member name="M:MediaClasses.Classes.APIClasses.APIResult.ToShowViewModel">
            <summary>
            Get a DailyShowAiringViewModel object representing the current api result
            </summary>
            <returns>DailyShowAiringViewModel representing the api result from the daily airing show feed.</returns>
        </member>
        <member name="T:MediaClasses.Classes.IMediaFile">
            <summary>
            Represents any type of media file in any state within the system.  Base interface for all media files
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.IMediaFile.FileCreated">
            <summary>
            DateTime file was created.  This can be used to reliably determine the exact moment the download for the file completed.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.IMediaFile.FilePath">
            <summary>
            String of the full path to the file on the filesystem.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.IMediaFile.FileName">
            <summary>
            Name of the file.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.IMediaFile.FileRootDirectory">
            <summary>
            Parent folder of the file.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.IMediaFile.FileSize">
            <summary>
            Size of the file on disk in bytes
            </summary>
        </member>
        <member name="T:MediaClasses.Classes.ISortMediaFile">
            <summary>
            Class that represents a sort file.  Sort files have been scanned but not necessarily classified yet.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.FilePath">
            <summary>
            Full path to the file
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.Classification">
            <summary>
            Program media file classification type of file
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.FilePathParts">
            <summary>
            String array of file parts split by 'SxxExx' in filename.  Used to determine show name, season number, and episode number.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.IsClassified">
            <summary>
            Boolean has the file been classified yet?
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.SeasonExists">
            <summary>
            Does the season folder exist?  If this is Episode 1 then we may have to create the season folder.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.SeasonPath">
            <summary>
            The full filepath to the season folder
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.ShowName">
            <summary>
            The show name as calculated strictly from the filename of the sort file.  This has not been verified or sanitized yet.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.ShowSeason">
            <summary>
            The show season as calculated strictly from the filename of the sort file.  This has not been verified or sanitized yet.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.ValidEpisodeFile">
            <summary>
            Is this a television show episode file?
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.ISortMediaFile.ValidMovieFile">
            <summary>
            Is this a movie file?
            </summary>
        </member>
        <member name="M:MediaClasses.Classes.ISortMediaFile.SplitFullPath(System.IO.FileInfo)">
            <summary>
            Split the full filename into an array by the '\' character.
            </summary>
            <param name="_file">FileInfo object used to determine full file path.</param>
            <returns></returns>
        </member>
        <member name="M:MediaClasses.Classes.ISortMediaFile.SplitFullPath(System.String)">
            <summary>
            Split the full filename into an array by the '\' character.
            </summary>
            <param name="_path">string full file path to the file.</param>
            <returns></returns>
        </member>
        <member name="T:MediaClasses.Classes.MediaDriveCollection">
            <summary>
            Class that represents a collection of MediaDrive objects.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaDriveCollection.Drives">
            <summary>
            Collection of Media Drives being monitored by the SDN Media Server
            </summary>
        </member>
        <member name="M:MediaClasses.Classes.MediaDriveCollection.#ctor">
            <summary>
            Instantiate a new MediaDriveCollection object.
            </summary>
        </member>
        <member name="T:MediaClasses.Classes.MediaFile">
            <summary>
            Class representing the view model for a media file.  This is the base class for all others within SDN Media Server.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaFile.Id">
            <summary>
            Database ID for the entity
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaFile.FileName">
            <summary>
            Name of the media file.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaFile.FilePath">
            <summary>
            Full file system path to the file.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaFile.FileSize">
            <summary>
            Size of the media file in bytes
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaFile.FileRootDirectory">
            <summary>
            Root directory where the file resides
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaFile.FileInfo">
            <summary>
            Filesystem file info about the media file.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaFile.FileCreated">
            <summary>
            DateTime object representing the creation date of the media file.  This can can reliably be used to determine the DateTime of when the file was downloaded.
            </summary>
        </member>
        <member name="M:MediaClasses.Classes.MediaFile.#ctor(System.String)">
            <summary>
            Create a new instance of the MediaFile class object.
            </summary>
            <param name="_file">Path to file used to populate properties.</param>
        </member>
        <member name="M:MediaClasses.Classes.MediaFile.#ctor(System.IO.FileInfo)">
            <summary>
            Create a new instance of the MediaFile class object.
            </summary>
            <param name="_file">FileInfo object reference used to populate properties.</param>
        </member>
        <member name="M:MediaClasses.Classes.MediaFile.GetViewModel">
            <summary>
            Get a view model of the data object.
            </summary>
            <returns>MediaFileViewModel representing the data object.</returns>
        </member>
        <member name="M:MediaClasses.Classes.MediaFile.NameFromPath(System.String)">
            <summary>
            Split the full path of the media file into a string array by the '\' character
            </summary>
            <param name="_path">string full path to the media file on the filesystem</param>
            <returns>Media file name as a string</returns>
            <example>
            string _path = @"C:\Documents\Media\TV\TestMedia.mkv";
            MediaFile _model = new MediaFile(_path)
            Console.WriteLine(_model.NameFromPath())
            
            //This will output: TestMedia.mkv
            </example>
        </member>
        <member name="M:MediaClasses.Classes.MediaFile.GetFileSize(System.Nullable{MediaClasses.Classes.MediaFile.SizeFormat})">
            <summary>
            Retrieve the file size in a specified format.  Default will return the file size in bytes.
            </summary>
            <param name="_format">enum value representing the unit of measurement to convert with. </param>
            <returns>file size in selected format.</returns>
        </member>
        <member name="M:MediaClasses.Classes.MediaFile.Dispose">
            <summary>
            Disposes of object when no longer needed.
            </summary>
        </member>
        <member name="T:MediaClasses.Classes.MediaFile.SizeFormat">
            <summary>
            Enum representing the different ways to display a file's size
            </summary>
        </member>
        <member name="F:MediaClasses.Classes.MediaFile.SizeFormat.KB">
            <summary>
            Format size to Kilobytes
            </summary>
        </member>
        <member name="F:MediaClasses.Classes.MediaFile.SizeFormat.MB">
            <summary>
            Format size to Megabytes
            </summary>
        </member>
        <member name="F:MediaClasses.Classes.MediaFile.SizeFormat.GB">
            <summary>
            Format size to Gigabytes
            </summary>
        </member>
        <member name="F:MediaClasses.Classes.MediaFile.SizeFormat.TB">
            <summary>
            Format size to Terabytes
            </summary>
        </member>
        <member name="T:MediaClasses.Classes.MediaFile.ValidMediaFileTypes">
            <summary>
            Enum representing valid extensions (file types) for media files
            </summary>
        </member>
        <member name="F:MediaClasses.Classes.MediaFile.ValidMediaFileTypes.MKV">
            <summary>
            File of type Matroska Video
            </summary>
        </member>
        <member name="F:MediaClasses.Classes.MediaFile.ValidMediaFileTypes.WMV">
            <summary>
            File of type Windows Media Video
            </summary>
        </member>
        <member name="F:MediaClasses.Classes.MediaFile.ValidMediaFileTypes.AVI">
            <summary>
            File of type Audio Video Interleave
            </summary>
        </member>
        <member name="F:MediaClasses.Classes.MediaFile.ValidMediaFileTypes.MP4">
            <summary>
            File of type MPEG-4 Part 14
            </summary>
        </member>
        <member name="T:MediaClasses.Classes.MediaGenreViewModel">
            <summary>
            A class used to hold genre data from an api result
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaGenreViewModel.id">
            <summary>
            TheMovieDB.org genre id
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.MediaGenreViewModel.name">
            <summary>
            Display name of the genre
            </summary>
        </member>
        <member name="T:MediaClasses.Classes.SortMediaFile">
            <summary>
            Class representing a media file in the sort folder, not yet classified into a TelevisionEpisode
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.FilePath">
            <summary>
            Full path to the file
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.ShowName">
            <summary>
            Name of the show this media file is an episode belonging to
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.ShowSeason">
            <summary>
            Season number this media file episode belongs to
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.SeasonExists">
            <summary>
            Does the folder for the season exist on the filesystem?
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.SeasonPath">
            <summary>
            Full file path to the season folder
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.IsClassified">
            <summary>
            Has this sort file been scanned and classified?
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.Classification">
            <summary>
            Classification of the file after being scanned
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.ValidEpisodeFile">
            <summary>
            Is this sort file a valid television episode?
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.ValidMovieFile">
            <summary>
            Is this sort file a valid movie file?
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.SortMediaFile.FilePathParts">
            <summary>
            Full file path value split by the '\' character.
            </summary>
        </member>
        <member name="M:MediaClasses.Classes.SortMediaFile.#ctor(System.String)">
            <summary>
            New instance of a SortMediaFile object
            </summary>
            <param name="_file">Full file path to the media file.</param>
        </member>
        <member name="M:MediaClasses.Classes.SortMediaFile.#ctor(System.IO.FileInfo)">
            <summary>
            New instance of a SortMediaFile object
            </summary>
            <param name="_file">FileInfo object of the media file.</param>
        </member>
        <member name="M:MediaClasses.Classes.SortMediaFile.#ctor(MediaClasses.Classes.IMediaFile)">
            <summary>
            New instance of a SortMediaFile object
            </summary>
            <param name="_file"></param>
        </member>
        <member name="M:MediaClasses.Classes.SortMediaFile.SplitFullPath(System.String)">
            <summary>
            Split the full path of the media file by the '\' character
            </summary>
            <param name="_path">string full filesystem path to the file.</param>
            <returns></returns>
        </member>
        <member name="M:MediaClasses.Classes.SortMediaFile.SplitFullPath(System.IO.FileInfo)">
            <summary>
            Split the full path of the media file by the '\' character
            </summary>
            <param name="_file">FileInfo object representing our file</param>
            <returns></returns>
        </member>
        <member name="T:MediaClasses.Classes.TelevisionEpisode">
            <summary>
            Class representing a media file that has been classified as a Television Episode.  This is one of two base classes for classified sort items.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.TelevisionEpisode.TelevisionShow">
            <summary>
            Name of the Television Show this episode belongs to.
            </summary>
        </member>
        <member name="P:MediaClasses.Classes.TelevisionEpisode.TelevisionSeason">
            <summary>
            Name of the Television Season this episode belongs to.
            </summary>
        </member>
        <member name="M:MediaClasses.Classes.TelevisionEpisode.#ctor(System.String)">
            <summary>
            Create a new instance of the TelevisionEpisode object.  Television Episodes are one of two base classes for classified sort items.
            </summary>
            <param name="_file">string path to the episode file.</param>
        </member>
        <member name="M:MediaClasses.Classes.TelevisionEpisode.#ctor(System.IO.FileInfo)">
            <summary>
            Create a new instance of the Television object.  Television Episodes are one of two base classes for classfied sort items.
            </summary>
            <param name="_file">FileInfo object related to the episode file.</param>
        </member>
        <member name="T:MediaClasses.Config.Configuration">
            <summary>
            Class for retrieving and manipulating program configuration data and options.
            </summary>
        </member>
        <member name="T:MediaClasses.Config.Configuration.AppConfig">
            <summary>
            Class for dealing with the program App.config file
            </summary>
        </member>
        <member name="M:MediaClasses.Config.Configuration.AppConfig.GetConnectionString">
            <summary>
            Retrieve the connection string from the App.config file.
            </summary>
            <returns>string SQL connection string</returns>
        </member>
        <member name="M:MediaClasses.Config.Configuration.AppConfig.GetDatabaseServer">
            <summary>
            Retrieve the database server from the App.config file
            </summary>
            <returns>string database server name</returns>
        </member>
        <member name="M:MediaClasses.Config.Configuration.AppConfig.GetDatabaseName">
            <summary>
            Retrieve the database name from the App.config file
            </summary>
            <returns>string database name</returns>
        </member>
        <member name="M:MediaClasses.Config.Configuration.AppConfig.GetDatabaseInstance">
            <summary>
            Retrieve the database instance name from the App.config file
            </summary>
            <returns>string database instance name</returns>
        </member>
        <member name="M:MediaClasses.Config.Configuration.AppConfig.GetSortDirectory">
            <summary>
            Retrieve the sort directory path from the App.config file
            </summary>
            <returns>string directory path</returns>
        </member>
        <member name="M:MediaClasses.Config.Configuration.AppConfig.GetTelevisionDrives">
            <summary>
            Retrieve the list of Television Show drives from the App.config file
            </summary>
            <returns>List of drives containing television shows</returns>
        </member>
        <member name="M:MediaClasses.Config.Configuration.AppConfig.GetMovieDrives">
            <summary>
            Retrieve the list of Movie drives from the App.config file
            </summary>
            <returns>List of drives containing movies</returns>
        </member>
        <member name="M:MediaClasses.Config.Configuration.AppConfig.GetConfigurationSettings">
            <summary>
            Retrieve program settings from the App.config file
            </summary>
            <returns>Dictionary of program settings</returns>
        </member>
        <member name="T:MediaClasses.Enum.SortEnums">
            <summary>
            Enums related to sort files
            </summary>
        </member>
        <member name="T:MediaClasses.Enum.SortEnums.SortTypeClassification">
            <summary>
            Enum whose values represent classification types of sort files.
            </summary>
        </member>
        <member name="F:MediaClasses.Enum.SortEnums.SortTypeClassification.SORT">
            <summary>
            File has not yet been classified.
            </summary>
        </member>
        <member name="F:MediaClasses.Enum.SortEnums.SortTypeClassification.TV">
            <summary>
            File has been classified as a Television Episode.
            </summary>
        </member>
        <member name="F:MediaClasses.Enum.SortEnums.SortTypeClassification.MOVIE">
            <summary>
            File has been classified as a Movie file.
            </summary>
        </member>
        <member name="T:MediaClasses.Exceptions.InvalidFileTypeException">
            <summary>
            Invalid file type has been detected by sort scanner.
            </summary>
        </member>
        <member name="P:MediaClasses.Exceptions.InvalidFileTypeException.Message">
            <summary>
            Message indicating the exception error.
            </summary>
            
        </member>
        <member name="P:MediaClasses.Exceptions.InvalidFileTypeException.InnerException">
            <summary>
            Inner exception
            </summary>
        </member>
        <member name="M:MediaClasses.Exceptions.InvalidFileTypeException.#ctor(System.String)">
            <summary>
            Exception of InvalidFileTypeException represents invalid filetype enountered by sort scanner.
            </summary>
            <param name="fileType"></param>
        </member>
        <member name="T:MediaClasses.Ext.MediaFileExt">
            <summary>
            Class to extend functionality of the MediaFile class.
            </summary>
        </member>
        <member name="M:MediaClasses.Ext.MediaFileExt.ToSort(MediaClasses.Classes.MediaFile)">
            <summary>
            Convert this MediaFile object to a SortMediaFile object
            </summary>
            <param name="_file">MediaFile to convert</param>
            <returns>Converted SortMediaFile object</returns>
        </member>
        <member name="T:MediaClasses.Lib.LibraryStorageLib">
            <summary>
            Class for dealing with various functions and processes regarding media libraries and file storeage within the system
            </summary>
        </member>
        <member name="M:MediaClasses.Lib.LibraryStorageLib.GetAvailableDriveSpace(MediaClasses.ViewModels.MediaDrive)">
            <summary>
            Get the available space on a system hard drive used to store media
            </summary>
            <returns>decimal representing available space in MB</returns>
        </member>
        <member name="M:MediaClasses.Lib.LibraryStorageLib.IsCorrectDriveType(System.Char,MediaClasses.Enum.DriveTypes)">
            <summary>
            Check if the Drive with the matching supplied letter has the correct DriveTypes value
            </summary>
            <param name="_driveLetter">Letter of the MediaDrive to check</param>
            <param name="_type">Expected DriveTypes value of the drive represented by the letter</param>
            <returns>True if drive represented by letter has the provided DriveTypes value, otherwise false.</returns>
        </member>
        <member name="M:MediaClasses.Lib.LibraryStorageLib.IsCorrectDriveAiringType(MediaClasses.ViewModels.MediaDrive,MediaClasses.Enum.ShowAiringStatus,System.Decimal@)">
            <summary>
            Check if the supplied MediaDrive holds the correct ShowAiringStatus value.  Also set out decimal variable to MB of space remaining.
            </summary>
            <param name="_drive">MediaDrive object to check</param>
            <param name="_status">Expected ShowAiringStatus value of MediaDrive object</param>
            <param name="_remainingSpace">Out decimal to hold available space on MediaDrive object.</param>
            <returns>True is correct type, otherwise false.</returns>
        </member>
        <member name="T:MediaClasses.Lib.MediaConversion">
            <summary>
            Class to convert between media classes.
            </summary>
        </member>
        <member name="M:MediaClasses.Lib.MediaConversion.ToEpisode(MediaClasses.Classes.ISortMediaFile)">
            <summary>
            Convert SortMediaFile object into TelevisionEpisode object.
            </summary>
            <param name="_sortFile">Sort file to convert</param>
            <returns>Converted TelevisionEpisode object</returns>
        </member>
        <member name="M:MediaClasses.Lib.MediaConversion.ToSort(MediaClasses.Classes.IMediaFile)">
            <summary>
            Convert MediaFile object into SortMediaFile object.
            </summary>
            <param name="_mediaFile">Media file to convert</param>
            <returns>Converted SortMediaFile object</returns>
        </member>
        <member name="T:MediaClasses.Lib.SortProcessing">
            <summary>
            Static class to handle sort processing and other sort folder functions.
            </summary>
        </member>
        <member name="M:MediaClasses.Lib.SortProcessing.IsExistingShow(System.String)">
            <summary>
            Does this show exist already on a media drive?
            </summary>
            <param name="showName">name of the show to search</param>
            <returns>true if show exists on a media drive, false if not</returns>
        </member>
        <member name="M:MediaClasses.Lib.SortProcessing.GetMediaDrives">
            <summary>
            Get a list of media drives, their media type, and media airing status (tv shows)
            </summary>
            <returns>List of tuple with drive letter, media type, and media airing status</returns>
        </member>
        <member name="T:MediaClasses.Lib.TMDBApiLib">
            <summary>
            Class for making requests to and from the TheMovieDB API.
            </summary>
        </member>
        <member name="M:MediaClasses.Lib.TMDBApiLib.SearchShows(System.String,System.Int32,System.String)">
            <summary>
            Find the show information on the searched string
            </summary>
            <param name="queryShowName">Show name to search</param>
            <param name="page">Get the results from a specified page, default is 1</param>
            <param name="apiKey">Developer API key for accessing TheMovieDB API and making requests</param>
            <returns>APISearchResults object with the results from the API query</returns>
        </member>
        <member name="M:MediaClasses.Lib.TMDBApiLib.GetGenres(System.String)">
            <summary>
            Get a list of Television Show Genres
            </summary>
            <param name="apiKey">TheMovieDB developer API key</param>
            <returns>List of genre view models representing the genres available</returns>
        </member>
        <member name="M:MediaClasses.Lib.TMDBApiLib.GetGenres(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Get a list of Television Show genres using the provided list of genre ids
            </summary>
            <param name="_genreIds">List of genre ids used to get view models</param>
            <param name="apiKey">TheMovieDB developer API key</param>
            <returns>List of genre view models populated with the results</returns>
        </member>
        <member name="M:MediaClasses.Lib.TMDBApiLib.GetTodaysAiringShows(System.String)">
            <summary>
            Get the shows that are scheduled to air new episodes for today
            </summary>
            <param name="apiKey">TheMovieDB developer API key</param>
            <returns></returns>
        </member>
        <member name="M:MediaClasses.Lib.TMDBApiLib.IsAiringToday(System.String,System.String)">
            <summary>
            Determine if a show is scheduled to air a new episode today
            </summary>
            <param name="showName">name of show to check</param>
            <param name="apiKey">TheMovieDB developer API key</param>
            <returns>true if show is scheduled to air new episode, false if not</returns>
        </member>
        <member name="M:MediaClasses.Lib.TMDBApiLib.IsAiringToday(System.String,MediaClasses.Classes.APIClasses.DailyAiringApiResult)">
            <summary>
            Determine if a show is airing by querying a previous API call's results
            </summary>
            <param name="showName">Name of the show to search</param>
            <param name="_data">Results from prior api call to query</param>
            <returns>True if show is set to air today, otherwise false.</returns>
        </member>
        <member name="T:MediaClasses.ViewModels.MediaDrive">
            <summary>
            Represents a system hard drive used to stored a type of media files.
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaDrive.DriveLetter">
            <summary>
            System drive letter of the hard drive
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaDrive.MediaAiringStatus">
            <summary>
            Status of whether the drive holds active shows or ended shows
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaDrive.DriveType">
            <summary>
            Type of media stored on the drive
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaDrive.MediaRootPath">
            <summary>
            The path to the root folder where media is stored on this drive
            </summary>
        </member>
        <member name="M:MediaClasses.ViewModels.MediaDrive.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Create a new instance of a media drive from a DirectoryInfo object.
            </summary>
            <param name="_info">DirectoryInfo object to use</param>
        </member>
        <member name="M:MediaClasses.ViewModels.MediaDrive.#ctor(System.Char,MediaClasses.Enum.DriveTypes)">
            <summary>
            Create a new instance of a media drive from a drive letter and DriveType
            </summary>
            <param name="_driveLetter">Drive letter to use</param>
            <param name="_driveType">DriveTypes.DriveType to use</param>
        </member>
        <member name="M:MediaClasses.ViewModels.MediaDrive.#ctor(System.String)">
            <summary>
            Create a new instance of a media drive from a file path as a string
            </summary>
            <param name="_mediaPath">string file path to use</param>
        </member>
        <member name="M:MediaClasses.ViewModels.MediaDrive.#ctor">
            <summary>
            Create a new instance of a media drive.
            </summary>
        </member>
        <member name="M:MediaClasses.ViewModels.MediaDrive.GetMediaDrives(System.Nullable{MediaClasses.Enum.DriveTypes},System.Boolean)">
            <summary>
            Get a list of tuples representing media drives, with values for drive letter, media type, and media airing status.  
            </summary>
            <param name="_mediaType">Type of media stored on the drive.  Ignored if getting all types.</param>
            <param name="_getAllTypes">True if all drives should be returned or false if just ones with the specified media type </param>
            <returns>List of tuples containing drive letter, drive media type, and media airing status.</returns>
        </member>
        <member name="M:MediaClasses.ViewModels.MediaDrive.GetMediaDrives">
            <summary>
            Get the media drives from the temporary static array, upgrade to database later on.
            </summary>
            <returns>List of tuples containing the drive letter, media type stored on the drive, and boolean determining if the drive stores active shows or not</returns>
        </member>
        <member name="T:MediaClasses.ViewModels.MediaFileViewModel">
            <summary>
            Class representing the view model for a media file.  This is the base class for all others within SDN Media Server.
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaFileViewModel.Id">
            <summary>
            Database ID for the entity record
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaFileViewModel.FileName">
            <summary>
            Name of the media file.
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaFileViewModel.FilePath">
            <summary>
            Full file system path to the file.
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaFileViewModel.FileSize">
            <summary>
            Size of the media file in bytes
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaFileViewModel.FileRootDirectory">
            <summary>
            Root directory where the file resides
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaFileViewModel.FileInfo">
            <summary>
            Filesystem file info about the media file.
            </summary>
        </member>
        <member name="P:MediaClasses.ViewModels.MediaFileViewModel.FileCreated">
            <summary>
            DateTime object representing the creation date of the media file.  This can reliably be used to determine the DateTime of when the file download was completed.
            </summary>
        </member>
        <member name="M:MediaClasses.ViewModels.MediaFileViewModel.#ctor(MediaClasses.Classes.MediaFile)">
            <summary>
            Create a new instance of the MediaFileViewModel class object.
            </summary>
            <param name="_data">MediaFile object representing the scanned file</param>
        </member>
        <member name="M:MediaClasses.ViewModels.MediaFileViewModel.#ctor">
            <summary>
            Create a new instance of the MediaFile class object.
            </summary>
        </member>
        <member name="T:MediaClasses.ViewModels.ShowMetaDataViewModel">
            <summary>
            Holds meta data returned for a show from an API call.
            </summary>
        </member>
        <member name="T:WebUI.DatabaseContext.MediaDrive">
            <summary>
            Class that represents a database record for a media drive in the system.
            </summary>
        </member>
        <member name="P:WebUI.DatabaseContext.MediaDrive.PkDriveId">
            <summary>
            Database PK of the record for the drive/
            </summary>
        </member>
        <member name="P:WebUI.DatabaseContext.MediaDrive.DriveLetter">
            <summary>
            The system drive letter, ie C, D, etc.
            </summary>
        </member>
        <member name="P:WebUI.DatabaseContext.MediaDrive.DriveMediaType">
            <summary>
            The type of media stored on the drive, usually Television or Movies.
            </summary>
        </member>
        <member name="P:WebUI.DatabaseContext.MediaDrive.MediaLibraryPath">
            <summary>
            The path to the directory on the drive where the media type is stored.
            </summary>
        </member>
    </members>
</doc>
